""" Copyright 2012, July 31
	Written by Pattarapol (Cheer) Iamngamsup
	E-mail:  IAM.PATTARAPOL@GMAIL.COM
	
	Largest product in a series
	Problem 8
	
	Find the greatest product of thirteen consecutive digits 
	in the 1000-digit number.

	73167176531330624919225119674426574742355349194934
	96983520312774506326239578318016984801869478851843
	85861560789112949495459501737958331952853208805511
	12540698747158523863050715693290963295227443043557
	66896648950445244523161731856403098711121722383113
	62229893423380308135336276614282806444486645238749
	30358907296290491560440772390713810515859307960866
	70172427121883998797908792274921901699720888093776
	65727333001053367881220235421809751254540594752243
	52584907711670556013604839586446706324415722155397
	53697817977846174064955149290862569321978468622482
	83972241375657056057490261407972968652414535100474
	82166370484403199890008895243450658541227588666881
	16427171479924442928230863465674813919123162824586
	17866458359124566529476545682848912883142607690042
	24219022671055626321111109370544217506941658960408
	07198403850962455444362981230987879927244284909188
	84580156166097919133875499200524063689912560717606
	05886116467109405077541002256983155200055935729725
	71636269561882670428252483600823257530420752963450
"""

#################################################
#   Importing libraries & modules
import datetime

#################################################
#   Global variables
NumStr =	'73167176531330624919225119674426574742355349194934'
NumStr +=	'96983520312774506326239578318016984801869478851843'
NumStr +=	'85861560789112949495459501737958331952853208805511'
NumStr +=	'12540698747158523863050715693290963295227443043557'
NumStr +=	'66896648950445244523161731856403098711121722383113'
NumStr +=	'62229893423380308135336276614282806444486645238749'
NumStr +=	'30358907296290491560440772390713810515859307960866'
NumStr +=	'70172427121883998797908792274921901699720888093776'
NumStr +=	'65727333001053367881220235421809751254540594752243'
NumStr +=	'52584907711670556013604839586446706324415722155397'
NumStr +=	'53697817977846174064955149290862569321978468622482'
NumStr +=	'83972241375657056057490261407972968652414535100474'
NumStr +=	'82166370484403199890008895243450658541227588666881'
NumStr +=	'16427171479924442928230863465674813919123162824586'
NumStr +=	'17866458359124566529476545682848912883142607690042'
NumStr +=	'24219022671055626321111109370544217506941658960408'
NumStr +=	'07198403850962455444362981230987879927244284909188'
NumStr +=	'84580156166097919133875499200524063689912560717606'
NumStr +=	'05886116467109405077541002256983155200055935729725'
NumStr +=	'71636269561882670428252483600823257530420752963450'

#################################################
#   Functions

#################################################
#   Classes

#################################################
#   Main function
def main():
	greatestProduct = 0
	for i in range( 0, len( NumStr ) - 12 ):
		consecutiveProduct = ( 
			int( NumStr[i] ) 
			* int( NumStr[i+1] ) 
			* int( NumStr[i+2] ) 
			* int( NumStr[i+3] ) 
			* int( NumStr[i+4] ) 
			* int( NumStr[i+5] ) 
			* int( NumStr[i+6] ) 
			* int( NumStr[i+7] ) 
			* int( NumStr[i+8] ) 
			* int( NumStr[i+9] ) 
			* int( NumStr[i+10] )
			* int( NumStr[i+11] )
			* int( NumStr[i+12] )   
		)
		
		if consecutiveProduct > greatestProduct:
			greatestProduct = consecutiveProduct
	print( 'answer = {0}'.format( greatestProduct ) )

#################################################
#   Main execution
if __name__ == '__main__':
	#   get starting date time
	startingDateTime = datetime.datetime.utcnow()
	print( 'startingDateTime = {0} UTC'.format( startingDateTime ) )

	#   call main function
	main()

	#   get ending date time
	endingdateTime = datetime.datetime.utcnow()
	print( 'endingdateTime = {0} UTC'.format( endingdateTime ) )

	#   compute delta date time
	deltaDateTime = endingdateTime - startingDateTime
	print( 'deltaDateTime = {0}'.format( deltaDateTime ) )
